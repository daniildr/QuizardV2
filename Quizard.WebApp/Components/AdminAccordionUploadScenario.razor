@using System.Text
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="accordion-item">
    <h2 class="accordion-header">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
            Uploading a script file
        </button>
    </h2>
    <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
        <div class="accordion-body">
            <div class="container mt-4">
                @if (!string.IsNullOrEmpty(_message))
                {
                    <div class="alert @(_isError ? "alert-danger" : "alert-success")" role="alert">
                        @_message
                    </div>
                }

                <div class="mb-3">
                    <label for="scenarioJson" class="form-label">Game scenario (JSON):</label>
                    <textarea id="scenarioJson"
                                      class="form-control"
                                      rows="15"
                                      @bind="_scenarioJson"
                                      placeholder="Paste your script's JSON here..."></textarea>
                </div>

                <button class="btn btn-primary" @onclick="UploadScenario" disabled="@_isBusy">
                    @if (_isBusy)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span>Upload</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string _scenarioJson = string.Empty;
    private bool _isBusy;
    private bool _isError;
    private string _message = string.Empty;
    
    private async Task UploadScenario()
    {
        _isBusy = true;
        _message = string.Empty;

        try
        {
            using var request = new HttpRequestMessage(HttpMethod.Post, $"{Navigation.BaseUri.TrimEnd('/')}/api/v1/Upload");
            request.Content = new StringContent(_scenarioJson, Encoding.UTF8, "application/json");
            
            using var response = await Http.SendAsync(request);

            switch ((int)response.StatusCode)
            {
                case 201:
                    _isError = false;
                    _message = "The game scenario has been successfully loaded!";
                    break;

                case 400:
                    _isError = true;
                    _message = "400 Bad Request: Check the validity of the JSON and required fields.";
                    break;

                case 401:
                    _isError = true;
                    _message = "401 Unauthorized: License must be activated.";
                    break;

                case 403:
                    _isError = true;
                    _message = "403 Forbidden: Your license level does not allow you to load scripts.";
                    break;

                case 429:
                    _isError = true;
                    _message = "429 Too Many Requests: Request limit exceeded, please try again later.";
                    break;

                case 500:
                    _isError = true;
                    _message = "500 Internal Server Error: Server side error.";
                    break;

                case 503:
                    _isError = true;
                    _message = "503 Service Unavailable: The service is temporarily unavailable.";
                    break;

                default:
                    _isError = true;
                    var text = await response.Content.ReadAsStringAsync();
                    _message = $"{(int)response.StatusCode} {response.ReasonPhrase}: {text}";
                    break;
            }
        }
        catch (Exception ex)
        {
            _isError = true;
            _message = $"Request error: {ex.Message}";
        }
        finally
        {
            _isBusy = false;
        }
    }
}