@using Quizard.Core.Enums
@using Quizard.WebApp.Services
@inject GameService GameService

<div class="row m-auto player-header">
    @switch (GameService!.GameState)
    {
        case GameState.WaitingForPlayers:
            <LabelHeader Label="@GameService.Scenario.Localization.LoginLabel"/>
            break;
        
        case GameState.Auction:
        case GameState.RoundPlaying:
        case GameState.QuestionPlaying:
        case GameState.RevealShowing:
            <PlayerInfoHeader/>
            <div class="col">
                <div class="row text-center">
                    <div class="col">
                        <h1>@GameService.Scenario.Localization.RoundLabel @GameService.RoundNumber</h1>
                    </div>
                </div>
                <div class="row text-center">
                    <div class="col">
                        <h1>@GameService.Round?.Name</h1>
                    </div>
                </div>
            </div>
            <div class="col"></div>
            break;

        case GameState.WaitStats:
        case GameState.ShowingStats:
            <LabelHeader Label="@GameService.Scenario.Localization.RoundResultsLabel"/>
            break;

        case GameState.Voting:
            <LabelHeader Label="@GameService.Scenario.Localization.RoundChoiceLabel"/>
            break;

        case GameState.Shop:
            <ShopHeader/>
            break;

        case GameState.ApplyingTargetModifiers:
            <PlayerInfoHeader/>
            <div class="col text-center d-flex align-items-center justify-content-center">
                <h1>@GameService.Scenario.Localization.ApplyingModifiersLabel</h1>
            </div>
            <div class="col"></div>
            break;

        case GameState.Finished:
        case GameState.ShowingScenarioStats:
            <LabelHeader Label="@GameService.Scenario.Localization.GameFinishLabel"/>
            break;

        case GameState.Media:
        default:
            break;
    }

</div>

@code {

    protected override Task OnInitializedAsync()
    {
        GameService.OnChange += StateHasChanged;
        return Task.CompletedTask;
    }
}