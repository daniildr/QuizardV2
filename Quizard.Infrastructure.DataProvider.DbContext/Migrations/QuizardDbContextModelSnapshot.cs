// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quizard.Infrastructure.DataProvider.DbContext;

#nullable disable

namespace Quizard.Infrastructure.DataProvider.DbContext.Migrations
{
    [DbContext(typeof(QuizardDbContext))]
    partial class QuizardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quizard.Core.Entities.Answer", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<string>("Button")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<byte[]>("QuestionId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Game", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("boolean");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Hint", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("QuestionId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Hints", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.License", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpirationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GamesLeft")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SaltId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SaltId")
                        .IsUnique();

                    b.ToTable("Licenses", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.LicenseSecret", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LicenseSecrets", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Localization", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<string>("ApplyingModifiersLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AttentionLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BetTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BidAcceptedLabelPart1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BidAcceptedLabelPart2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BidButtonLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonBuy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonCancel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonConfirm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonContinue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonDown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonFinish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonStub")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonUp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameFinishLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HintLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsufficientFunds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MakeBetLabelPart1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MakeBetLabelPart2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PantomimeLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriceLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductAlreadyPurchased")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductHasBeenPurchased")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoundChoiceLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoundLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoundResultsLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScoreLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopWaitLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpeedWinnerLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VotingLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaitOtherPlayersLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaitYourTurnLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId")
                        .IsUnique();

                    b.ToTable("Localizations", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Media", b =>
                {
                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("DelaySeconds")
                        .HasColumnType("integer");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowOnPlayer")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("MediaId");

                    b.ToTable("Media", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Player", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Question", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<int?>("AnswerDelay")
                        .HasColumnType("integer");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionTimeout")
                        .HasColumnType("integer");

                    b.Property<string>("RoundId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("RoundId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Reveal", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<byte[]>("QuestionId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Reveals", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Round", b =>
                {
                    b.Property<string>("RoundId")
                        .HasColumnType("text");

                    b.Property<int>("CorrectMultiplier")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IncorrectMultiplier")
                        .HasColumnType("integer");

                    b.Property<int>("MissedMultiplier")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("text");

                    b.Property<int?>("RoundDuration")
                        .HasColumnType("integer");

                    b.Property<int>("RoundTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoundId");

                    b.HasIndex("RoundTypeId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Rounds", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.RoundStatistic", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("GameId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PlayerId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RoundId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundStatistics", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.RoundType", b =>
                {
                    b.Property<int>("RoundTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DisplayQuestionOnInformator")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayQuestionOnPlayers")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoundClass")
                        .HasColumnType("integer");

                    b.Property<bool>("WaitingRoundTimeout")
                        .HasColumnType("boolean");

                    b.HasKey("RoundTypeId");

                    b.ToTable("RoundTypes", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Scenario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BasePointPrice")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinishPlaceholder")
                        .HasColumnType("text");

                    b.Property<int?>("GameDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoundPresentationDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowScenarioStatsOnFinish")
                        .HasColumnType("boolean");

                    b.Property<int>("StartPlayerScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Scenarios", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.ScenarioStatistic", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("GameId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PlayerId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioStatistics", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Stage", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("MediaId")
                        .HasColumnType("text");

                    b.Property<string>("RoundId")
                        .HasColumnType("text");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StageDuration")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("RoundId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Stages", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Stock", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<int>("CostMultiplier")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("UniqForPlayer")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("Quizard.Core.Entities.Answer", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quizard.Core.Entities.Hint", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Question", null)
                        .WithMany("Hints")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quizard.Core.Entities.License", b =>
                {
                    b.HasOne("Quizard.Core.Entities.LicenseSecret", "Salt")
                        .WithOne("License")
                        .HasForeignKey("Quizard.Core.Entities.License", "SaltId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salt");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Localization", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Scenario", null)
                        .WithOne("Localization")
                        .HasForeignKey("Quizard.Core.Entities.Localization", "ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quizard.Core.Entities.Question", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quizard.Core.Entities.Round", null)
                        .WithMany("Questions")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Reveal", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quizard.Core.Entities.Question", null)
                        .WithOne("Reveal")
                        .HasForeignKey("Quizard.Core.Entities.Reveal", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Round", b =>
                {
                    b.HasOne("Quizard.Core.Entities.RoundType", "RoundType")
                        .WithMany()
                        .HasForeignKey("RoundTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizard.Core.Entities.Scenario", null)
                        .WithMany("RoundDefinitions")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoundType");
                });

            modelBuilder.Entity("Quizard.Core.Entities.RoundStatistic", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizard.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizard.Core.Entities.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Quizard.Core.Entities.ScenarioStatistic", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizard.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quizard.Core.Entities.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Stage", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quizard.Core.Entities.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Quizard.Core.Entities.Scenario", null)
                        .WithMany("Stages")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Stock", b =>
                {
                    b.HasOne("Quizard.Core.Entities.Scenario", null)
                        .WithMany("ShopStocks")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quizard.Core.Entities.LicenseSecret", b =>
                {
                    b.Navigation("License");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Hints");

                    b.Navigation("Reveal")
                        .IsRequired();
                });

            modelBuilder.Entity("Quizard.Core.Entities.Round", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Quizard.Core.Entities.Scenario", b =>
                {
                    b.Navigation("Localization")
                        .IsRequired();

                    b.Navigation("RoundDefinitions");

                    b.Navigation("ShopStocks");

                    b.Navigation("Stages");
                });
#pragma warning restore 612, 618
        }
    }
}
